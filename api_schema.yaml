x-definitions:
  - &max-user-photos          5
  - &max-user-interests       10
  - &short-description-length 120
  - &description-length       500


openapi: "3.0.3"


info:
  title: Friend-finder
  description: |
    [Project repository](https://github.com/arsuhinars/friend-finder)
  
    ### Error codes:
    Common errors:
    - `0` - Unexpected error (Status code: 500)

    - `1` - Invalid input format (Status code: 400)

    - `2` - Authorization required (Status code: 401)

    - `3` - Access is denied (Status code: 403)

    - `4` - Content was not found (Status code: 404)

    - `5` - Invalid access token (Status code: 400)

    Authorization errors:
    - `6` - Invalid login or password (Status code: 404)

    - `7` - Invalid refresh token (Status code: 400)

    - `8` - User profile is not confirmed by E-Mail (Status code: 400)

    - `9` - User with such login already exist (Status code 400)
  
    - `10` - Invalid confirmation code (Status code 400)

    Profile errors:
    - `11` - This profile was already rated (Status code 400)

    Message errors:
    - `12` - Invalid timestamp in the message (Status code 400)
    
    - `13` - Interlocutor for random chat wasn't found (Status code 500)
  contact:
    name: Arseny Fedorov
    url: https://t.me/arsuhinars
  license:
    name: MIT License
  version: "1.0"


servers:
  - url: http://localhost:{port}/
    description: Local development server
    variables:
      port:
        default: "8080"


paths:
  /authorize:
    get:
      tags: [ Auth ]
      summary: Get access and refresh token
      description: >
        In request body client sends user credentials (login, password). In
        response server sends access and refresh tokens. Access token is used to
        access most of methods. Refresh token is used to easily get new access
        token when old one expired.
      operationId: authorize
      requestBody:
        description: Client credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                login: { type: string, example: example@domain.com }
                password:
                  type: string
                  format: password
                  example: qwerty12
              required: [ login, password ]
      responses:
        "200":
          $ref: "#/components/responses/auth_response"
        default:
          $ref: "#/components/responses/error_response"

  /refresh_token:
    get:
      tags: [ Auth ]
      summary: Refresh access token
      description: >
        Client uses this method for getting new access token when old one was
        expired. In response server sends new access and refresh tokens.
      operationId: refresh_token
      requestBody:
        description: Refresh token
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token: { type: string }
              required: [ refresh_token ]
      responses:
        "200":
          $ref: "#/components/responses/auth_response"
        default:
          $ref: "#/components/responses/error_response"

  /user/create:
    post:
      tags: [ User ]
      summary: Create new user profile
      description: >
        Client sends user's registration data: name, E-Mail and password. Then
        server creates user profile. After user have to confirm E-Mail (look
        `/user/send_confirm_message` method), otherwise profile would be
        deleted.
      operationId: create_user
      requestBody:
        description: User registration data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string, example: Peter }
                email: { type: string, example: example@domain.com }
                password: { type: string, example: qwerty12 }
              required: [ name, email, password ]
      responses:
        "200":
          $ref: "#/components/responses/success_response"
        default:
          $ref: "#/components/responses/error_response"

  /user/is_email_confirmed:
    get:
      tags: [ User ]
      summary: Check if user E-Mail is confirmed
      operationId: is_email_confirmed
      security:
        - access_token: []
      responses:
        "200":
          description: Operation was successfuly done
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_email_confirmed: { type: boolean }
        default:
          $ref: "#/components/responses/error_response"

  /user/send_confirm_message:
    post:
      tags: [ User ]
      summary: Request server to send new E-Mail confirmation message
      description: >
        This method sends message with confirmation code. User have to enter it
        in UI, then application have to send it by `/user/confirm_email` method
        to confirm E-Mail of user profile.
      operationId: send_confirm_message
      security:
        - access_token: []
      responses:
        "200":
          $ref: "#/components/responses/success_response"
        default:
          $ref: "#/components/responses/error_response"
  
  /user/confirm_email:
    post:
      tags: [ User ]
      summary: Confirm user E-Mail
      operationId: confirm_email
      security:
        - access_token: []
      requestBody:
        description: Confirmation code that user entered
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/confirmation_code"
      responses:
        "200":
          $ref: "#/components/responses/success_response"
        default:
          $ref: "#/components/responses/error_response"

  /user/email:
    get:
      tags: [ User ]
      summary: Get user E-Mail
      operationId: get_user_email
      security:
        - access_token: []
      responses:
        "200":
          description: Operation was successfuly done
          content:
            application/json:
              schema:
                type: object
                properties:
                  email: { type: string }
        default:
          $ref: "#/components/responses/error_response"

  /user/profile:
    get:
      tags: [ User ]
      summary: Get data about current user profile
      operationId: get_user_profile
      security:
        - access_token: []
      responses:
        "200":
          description: Operation was successfuly done
          content:
            application/json:
              schema: { $ref: "#/components/schemas/user_profile" }
        default:
          $ref: "#/components/responses/error_response"
    post:
      tags: [ User ]
      summary: Update current user's profile
      description: Field `id` is not required and it affects nothing.
      operationId: set_user_profile
      security:
        - access_token: []
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/user_profile" }
      responses:
        "200":
          $ref: "#/components/responses/success_response"
        default:
          $ref: "#/components/responses/error_response"

  /user/{id}/photos_count:
    get:
      tags: [ User ]
      summary: Get amount of user photos by id
      operationId: get_user_photos_count
      security:
        - access_token: []
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          description: Operation was successfuly done
          content:
            application/json:
              schema:
                type: object
                properties:
                  photos_count: { type: integer }
        default:
          $ref: "#/components/responses/error_response"

  /user/{id}/photo/{index}:
    get:
      tags: [ User ]
      summary: Get user photo by index and id
      operationId: get_user_photo
      security:
        - access_token: []
      parameters:
        - $ref: "#/components/parameters/user_id"
        - name: index
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
            maximum: *max-user-photos
            exclusiveMaximum: true
          example: 0
      responses:
        "200":
          description: Operation was successfuly done
          content:
            image/webp:
              schema: { type: string, format: binary }
        default:
          $ref: "#/components/responses/error_response"
  
  /user/photo/{index}:
    post:
      tags: [ User ]
      summary: Add or update current user photo by its index
      description: |
        When photo with `index` doesn't exist, index will be set to amount of
        photos. For example, if there are 3 photos (indexes 0, 1 and 2 are
        occupied) and `index` is 4, added photo will be at index 3.

        When no photo is provided, this photo under `index` will be deleted. In
        this case the next indexes will be shifted.
      operationId: set_user_photo
      security:
        - access_token: []
      parameters:
        - name: index
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
            maximum: *max-user-photos
            exclusiveMaximum: true
          example: 0
      requestBody:
        required: false
        content:
          image/jpeg:
            schema: { type: string, format: binary }
          image/webp:
            schema: { type: string, format: binary }
      responses:
        "200":
          $ref: "#/components/responses/success_response"
        default:
          $ref: "#/components/responses/error_response"

  /user/{id}/avatar:
    get:
      tags: [ User ]
      summary: Get user avatar image by id
      description: >
        When response body is empty, user doesn't have any avatar.
      operationId: get_user_avatar
      security:
        - access_token: []
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          description: Operation was successfuly done
          content:
            image/webp:
              schema: { type: string, format: binary }
        default:
          $ref: "#/components/responses/error_response"

  /user/avatar:
    post:
      tags: [ User ]
      summary: Add or update current user avatar image
      description: >
        User avatar image will be cropped to fit the square. When request body
        is empty, user avatar will be deleted. Keep in mind that avatar image
        should fit the circle in the UI.
      operationId: set_user_avatar
      security:
        - access_token: []
      requestBody:
        required: false
        content:
          image/jpeg:
            schema: { type: string, format: binary }
          image/webp:
            schema: { type: string, format: binary }
      responses:
        "200":
          $ref: "#/components/responses/success_response"
        default:
          $ref: "#/components/responses/error_response"

  /user/password_change_request:
    post:
      tags: [ User ]
      summary: Send request to change user's password
      description: >
        Server sends confirmation code to user E-Mail. Then it should be
        confirmed by `/user/confirm_password_change` method.
      operationId: send_password_change_request
      security:
        - access_token: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                new_password: { type: string }
              required: [ new_password ]
      responses:
        "200":
          $ref: "#/components/responses/success_response"
        default:
          $ref: "#/components/responses/error_response"

  /user/confirm_password_change:
    post:
      tags: [ User ]
      summary: Confirm password changing
      description: >
        This method confirms password changing made by
        `/user/password_change_request`. Client should send code, enter by user
        in `code` property.
      operationId: confirm_password_change
      security:
        - access_token: []
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/confirmation_code" }
      responses:
        "200":
          $ref: "#/components/responses/success_response"
        default:
          $ref: "#/components/responses/error_response"

  /user/email_change_request:
    post:
      tags: [ User ]
      summary: Send request to change user's E-Mail
      description: >
        Has the same behaviour as the `/user/password_change_request`, but for
        user E-Mail.
      operationId: send_email_change_request
      security:
        - access_token: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                new_email: { type: string }
              required: [ new_email ]
      responses:
        "200":
          $ref: "#/components/responses/success_response"
        default:
          $ref: "#/components/responses/error_response"
  
  /user/confirm_email_change:
    post:
      tags: [ User ]
      summary: Confirm E-Mail changing
      description: >
        Confirms user's will to change the E-Mail. Then new E-Mail has to be
        confirmed too by `/user/send_confirm_message` and `/user/confirm_email`
        methods.
      operationId: confirm_email_change
      security:
        - access_token: []
      requestBody:
        content:
          application/json:
            schema: { $ref: "#/components/schemas/confirmation_code" }
      responses:
        "200":
          $ref: "#/components/responses/success_response"
        default:
          $ref: "#/components/responses/error_response"

  /select_profiles:
    get:
      tags: [ Profiles ]
      summary: Get next random profiles
      operationId: select_profiles
      security:
        - access_token: []
      parameters:
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            default: 5
      responses:
        "200":
          description: Operation was successfuly done
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/user_profile" }
        default:
          $ref: "#/components/responses/error_response"

  /profile/{id}/like:
    post:
      tags: [ Profiles ]
      summary: Like user profile by id
      operationId: like_profile
      security:
        - access_token: []
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          $ref: "#/components/responses/success_response"
        default:
          $ref: "#/components/responses/error_response"

  /profile/{id}/skip:
    post:
      tags: [ Profiles ]
      summary: Skip user profile by id
      description: It mean, that this profile won't appear during some time.
      operationId: skip_profile
      security:
        - access_token: []
      parameters:
        - $ref: "#/components/parameters/user_id"
      responses:
        "200":
          $ref: "#/components/responses/success_response"
        default:
          $ref: "#/components/responses/error_response"

  /my_likes:
    get:
      tags: [ Profiles ]
      summary: Get profiles of users that liked current user
      operationId: get_users_likes
      security:
        - access_token: []
      responses:
        "200":
          description: Operation was successfuly done
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/user_profile" }
        default:
          $ref: "#/components/responses/error_response"

  /active_chats:
    get:
      tags: [ Messages ]
      summary: Get active chats of current user
      operationId: get_active_chats
      security:
        - access_token: []
      responses:
        "200":
          description: Operation was successfuly done
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/user_chat" }
        default:
          $ref: "#/components/responses/error_response"

  /start_random_chat:
    post:
      tags: [ Messages ]
      summary: Start finding new random interlocutor
      description: >
        This method require longer timeout, because finding interlocutor may 
        require some time. After finding them server will create anonymous chat.
      operationId: start_random_chat
      security:
        - access_token: []
      responses:
        "200":
          description: Interlocutor was successfuly found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user_chat"
        default:
          $ref: "#/components/responses/error_response"

  /chat/{id}/messages:
    get:
      tags: [ Messages ]
      summary: Get list of messages in the chat by id
      operationId: get_messages
      security:
        - access_token: []
      parameters:
        - $ref: "#/components/parameters/chat_id"
        - name: limit
          in: query
          required: false
          schema: { type: integer, minimum: 1, default: 10 }
        - name: page
          in: query
          required: false
          schema: { type: integer, minimum: 0, default: 0 }
      responses:
        "200":
          description: Operation was successfuly done
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/message" }
        default:
          $ref: "#/components/responses/error_response"

  /chat/{id}/send_message:
    post:
      tags: [ Messages ]
      summary: Send message to the chat by id
      description: >
        Only `content` field is required. Besides, field `timestamp` can be
        provided. It can be used if message sending was delayed due to
        connection problems.
      operationId: send_message
      security:
        - access_token: []
      parameters:
        - $ref: "#/components/parameters/chat_id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/message"
      responses:
        "200":
          $ref: "#/components/responses/success_response"
        default:
          $ref: "#/components/responses/error_response"

  /chat/{id}/delete:
    post:
      tags: [ Messages ]
      summary: Delete chat by id
      operationId: delete_chat
      security:
        - access_token: []
      parameters:
        - $ref: "#/components/parameters/chat_id"
      responses:
        "200":
          $ref: "#/components/responses/success_response"
        default:
          $ref: "#/components/responses/error_response"

  /updates:
    get:
      tags: [ Updates ]
      summary: Get all unhandled events
      description: >
        With no parameters returns all unhandled events since last call of this
        method. Parameter `since` points since what timestamp events should be
        returned. Keep in mind that for events saving server uses caching so
        they won't be available forever.
      operationId: get_updates
      security:
        - access_token: []
      parameters:
        - name: since
          in: query
          required: false
          schema: { type: integer }
      responses:
        "200":
          description: Operation was successfuly done
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/update_event" }
        default:
          $ref: "#/components/responses/error_response"

  /listen_updates:
    get:
      tags: [ Updates ]
      summary: Update method with SSE support
      operationId: listen_updates
      security:
        - access_token: []
      responses:
        "200":
          description: Started new connection
          content:
            text/event-stream:
              schema:
                type: string
        default:
          $ref: "#/components/responses/error_response"


components:
  schemas:
    user_profile:
      title: UserProfile
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        birthdate: 
          type: string
          format: date
        location: { type: string }
        gender: { type: string, enum: [ male, female ] }
        target_gender: { type: string, enum: [ male, female ] }
        interests:
          type: array
          items: { type: string }
          uniqueItems: true
          maxLength: *max-user-interests
        short_description: { type: string, maxLength: *short-description-length }
        description: { type: string, maxLength: *description-length }
      required: [ name ]

    auth_response:
      title: AuthResponse
      type: object
      properties:
        access_token: { type: string }
        refresh_token: { type: string }

    confirmation_code:
      title: ConfirmationCode
      type: object
      properties:
        code: { type: string }
      required: [ code ]

    user_chat:
      title: UserChat
      description: >
        Object that contain information about active user chat. It has two
        types: `dialog` and `anonymous`. In `dialog` chat type this object
        contain information about interlocutor in `user_profile` field. In
        `anonymous` chat there are no information about another user.
      type: object
      properties:
        id: { type: integer }
        type:
          type: string
          enum: [ dialog, anonymous ]
        user_profile: { $ref: "#/components/schemas/user_profile" }
      required: [ chat_type ]

    message:
      title: Message
      type: object
      properties:
        id: { type: integer }
        chat_id: { type: integer }
        timestamp: { type: integer }
        sender_id: { type: integer }
        content: { type: string }
      required: [ content ]

    update_event:
      title: UpdateEvent
      type: object
      properties:
        timestamp: { type: integer }
        type:
          type: string
          enum: [ new_like, new_chat, new_message, chat_deleted ]
        profile:
          $ref: "#/components/schemas/user_profile"
        chat:
          $ref: "#/components/schemas/user_chat"
        message:
          $ref: "#/components/schemas/message"
        chat_id: { type: integer }
      required: [ timestamp, type ]

    error_response:
      title: ErrorResponse
      type: object
      properties:
        error_code: { type: integer, example: 0 }
        error_description:
          type: integer
          example: Unexpected error

  responses:
    auth_response:
      description: New access and refresh tokens
      content:
        application/json:
          schema: { $ref: "#/components/schemas/auth_response" }

    success_response:
      description: Operation was successfuly done
      content:
        application/json:
          schema: { type: object }

    error_response:
      description: Error response format. Look at error codes at the top to get
        more info.
      content:
        application/json:
          schema: { $ref: "#/components/schemas/error_response" }
  
  parameters:
    user_id:
      name: id
      in: path
      required: true
      schema: { type: integer }
      description: User id
    chat_id:
      name: id
      in: path
      required: true
      schema: { type: integer }
      description: Chat id

  securitySchemes:
    access_token:
      type: apiKey
      description: Client uses `access_token` to access some of the API methods.
        Look at `/authorize` and `/refresh_token` methods to get more info.
      name: access_token
      in: query


tags:
  - name: Auth
  - name: User
  - name: Profiles
    description: Methods for searching and rating other users' profiles
  - name: Messages
  - name: Updates
